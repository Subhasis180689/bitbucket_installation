---

# This playbook is intended for provisioning migration 'before' server instances, and should not be considered best practice.
# See migration-video-instances.yml for provisioning these instances.
#
# ansible-playbook -v -i inv/standalone_instances -e atl_db_root_password=XXX -e atl_jdbc_password=XXX test_migration_crowd.yml

- hosts: crowd
  become: true

  vars:
    atl_proxy_name: "crowd-before.deplops.com"

    atl_product_user: "crowd"
    atl_product_family: "crowd"
    atl_product_edition: "crowd"
    atl_product_version: "4.2.0"
    atl_enable_clustering: false

    atl_db_host: "localhost"
    atl_jdbc_user: "crowd"
    atl_jdbc_db_name: "crowd"

    atl_startup_systemd_params:
      - "Environment=JDBC_DRIVER={{ atl_db_driver }}"
      - "Environment=JDBC_DIALECT=org.hibernate.dialect.PostgreSQLDialect"
      - "Environment=JDBC_USER={{ atl_jdbc_user }}"
      - "Environment=JDBC_PASSWORD={{ atl_jdbc_password }}"
      - "Environment=JDBC_URL={{ atl_jdbc_url }}"

    atl_jvm_heap: "12288m"
    atl_use_system_jdk: true
    atl_download_format: "tarball"
    atl_systemd_service_name: "crowd.service"

    atl_write_tags: false

    atl_proxy_map:
      "": "http://localhost:8080"

    # Quick hack to avoid clash
    atl_product_home_shared: "{{ atl_product_home }}/dummy_shared"


  roles:
    - role: linux_common
    - role: aws_common
    - role: postgres_install
    - role: database_init
    - role: product_common
    - role: product_install
    - role: crowd_config
    - role: product_startup
    - role: nginx
